// Definition for the Solution class (non-public now)
class Solution {
    public int divide(int dividend, int divisor) {
        // Handle overflow case: when dividend is Integer.MIN_VALUE and divisor is -1
        if (dividend == Integer.MIN_VALUE && divisor == -1) {
            return Integer.MAX_VALUE;
        }

        // Determine the sign of the result
        boolean isNegative = (dividend < 0) != (divisor < 0);  // XOR to check if signs are different

        // Work with absolute values to simplify the calculation
        long dividendAbs = Math.abs((long) dividend);
        long divisorAbs = Math.abs((long) divisor);

        // Initialize result
        int quotient = 0;

        // Perform the division using bit manipulation
        while (dividendAbs >= divisorAbs) {
            long tempDivisor = divisorAbs;
            long multiple = 1;

            // Double the divisor and multiple until it becomes greater than dividend
            while (dividendAbs >= (tempDivisor << 1)) {
                tempDivisor <<= 1;  // Double the divisor
                multiple <<= 1;     // Double the multiple
            }

            // Subtract the largest possible multiple of divisor from dividend
            dividendAbs -= tempDivisor;
            quotient += multiple;
        }

        // If the result should be negative, negate the quotient
        if (isNegative) {
            quotient = -quotient;
        }

        // Ensure the quotient is within the 32-bit signed integer range
        return Math.min(Math.max(quotient, Integer.MIN_VALUE), Integer.MAX_VALUE);
    }
}

// Driver class to run the solution
public class Driver {
    public static void main(String[] args) {
        Solution solution = new Solution();

        // Example 1: Dividend = 10, Divisor = 3
        System.out.println(solution.divide(10, 3));  // Output: 3

        // Example 2: Dividend = 7, Divisor = -3
        System.out.println(solution.divide(7, -3));  // Output: -2

        // Example 3: Edge case - Dividend = Integer.MIN_VALUE, Divisor = -1
        System.out.println(solution.divide(Integer.MIN_VALUE, -1));  // Output: 2147483647 (Integer.MAX_VALUE)
    }
}
